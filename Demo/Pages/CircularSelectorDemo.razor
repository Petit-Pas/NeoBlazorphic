@page "/CircularSelectorDemo"

@using NeoBlazorphic.Components.Inputs.CircularSelectors
@using NeoBlazorphic.Models.SelectableItems
@using NeoBlazorphic.StyleParameters
<h3>CircularSelectorDemo</h3>

<CircularSelector T="string" ThemeColor="ThemeColor.Base" Shape="BackgroundShape.Convex">
    <CircularSelectorButtonContent T="string" xShift="0" yShift="0"> <img src="/icon-192.png" /> </CircularSelectorButtonContent>
    <CircularSelectorButtonContent T="string" xShift="0" yShift="0"> <img src="/icon-192.png" /> </CircularSelectorButtonContent>
    <CircularSelectorButtonContent T="string" xShift="0" yShift="0"> <img src="/icon-192.png" /> </CircularSelectorButtonContent>
    <CircularSelectorButtonContent T="string" xShift="0" yShift="0"> <img src="/icon-192.png" /> </CircularSelectorButtonContent>
    <CircularSelectorButtonContent T="string" xShift="0" yShift="0"> <img src="/icon-192.png" /> </CircularSelectorButtonContent>
    <CircularSelectorButtonContent T="string" xShift="0" yShift="0"> <img src="/icon-192.png" /> </CircularSelectorButtonContent>
    <CircularSelectorButtonContent T="string" xShift="0" yShift="0"> <img src="/icon-192.png" /> </CircularSelectorButtonContent>
    <CircularSelectorButtonContent T="string" xShift="0" yShift="0"> <img src="/icon-192.png" /> </CircularSelectorButtonContent>
    <CircularSelectorButtonContent T="string" xShift="0" yShift="0"> <img src="/icon-192.png" /> </CircularSelectorButtonContent>
</CircularSelector>

@if (NumList.Count == 9)
{
    <CircularSelector AngleOffset="180" T="SelectableItem<int>" ThemeColor="ThemeColor.Base" Shape="BackgroundShape.Concave" Selected="ThemeColor.Primary" CenterText="@CenterTextNum">
        <CircularSelectorButtonContent Item="NumList[0]" AdditionalClass="blue-color-hover" OnMouseClickCallBack="() => Select(0)" OnMouseOverCallBack="() => Hint(0)" SelectedClass="red-color" xShift="-1.3" yShift="-3"> <div style="font-size: 4px; color: var(--special-color);transition: all 0.15s ease-in-out;">0</div> </CircularSelectorButtonContent>
        <CircularSelectorButtonContent Item="NumList[1]" AdditionalClass="blue-color-hover" OnMouseClickCallBack="() => Select(1)" OnMouseOverCallBack="() => Hint(1)" SelectedClass="red-color" xShift="-1.5" yShift="-2.5"> <div style="font-size: 4px; color: var(--special-color);transition: all 0.15s ease-in-out;">1</div> </CircularSelectorButtonContent>
        <CircularSelectorButtonContent Item="NumList[2]" AdditionalClass="blue-color-hover" OnMouseClickCallBack="() => Select(2)" OnMouseOverCallBack="() => Hint(2)" SelectedClass="red-color" xShift="-1.5" yShift="-2.5"> <div style="font-size: 4px; color: var(--special-color);transition: all 0.15s ease-in-out;">2</div> </CircularSelectorButtonContent>
        <CircularSelectorButtonContent Disabled="true" Item="NumList[3]" AdditionalClass="blue-color-hover" OnMouseClickCallBack="() => Select(3)" OnMouseOverCallBack="() => Hint(3)" SelectedClass="red-color" xShift="-1.5" yShift="-2.5"> <div style="font-size: 4px; color: var(--special-color);transition: all 0.15s ease-in-out;">3</div> </CircularSelectorButtonContent>
        <CircularSelectorButtonContent Item="NumList[4]" AdditionalClass="blue-color-hover" OnMouseClickCallBack="() => Select(4)" OnMouseOverCallBack="() => Hint(4)" SelectedClass="red-color" xShift="-1.5" yShift="-3"> <div style="font-size: 4px; color: var(--special-color);transition: all 0.15s ease-in-out;">4</div> </CircularSelectorButtonContent>
        <CircularSelectorButtonContent Item="NumList[5]" AdditionalClass="blue-color-hover" OnMouseClickCallBack="() => Select(5)" OnMouseOverCallBack="() => Hint(5)" SelectedClass="red-color" xShift="-1.3" yShift="-3"> <div style="font-size: 4px; color: var(--special-color);transition: all 0.15s ease-in-out;">5</div> </CircularSelectorButtonContent>
        <CircularSelectorButtonContent Item="NumList[6]" AdditionalClass="blue-color-hover" OnMouseClickCallBack="() => Select(6)" OnMouseOverCallBack="() => Hint(6)" SelectedClass="red-color" xShift="-1.3" yShift="-3"> <div style="font-size: 4px; color: var(--special-color);transition: all 0.15s ease-in-out;">6</div> </CircularSelectorButtonContent>
        <CircularSelectorButtonContent Item="NumList[7]" AdditionalClass="blue-color-hover" OnMouseClickCallBack="() => Select(7)" OnMouseOverCallBack="() => Hint(7)" SelectedClass="red-color" xShift="-0.5" yShift="-3"> <div style="font-size: 4px; color: var(--special-color);transition: all 0.15s ease-in-out;">7</div> </CircularSelectorButtonContent>
        <CircularSelectorButtonContent Item="NumList[8]" AdditionalClass="blue-color-hover" OnMouseClickCallBack="() => Select(8)" OnMouseOverCallBack="() => Hint(8)" SelectedClass="red-color" xShift="-0.5" yShift="-2.5"> <div style="font-size: 4px; color: var(--special-color);transition: all 0.15s ease-in-out;">8</div> </CircularSelectorButtonContent>
    </CircularSelector>
    }
else
{
    <div>wtf? @NumList.Count</div>
}

@code {

    private void Select(int selected)
    {
        var element = NumList.Single(x => x.Item == selected);
        NumList.Select(element);
    }

    private void Hint(int selected)
    {
        CenterTextNum = selected.ToString();
    }

    public string CenterTextNum { get; set; } = "-1";
    public string CenterTextAlpha { get; set; } = "default";

    public MultipleSelectableItemList<int> NumList { get; set; } = new();
    public UniqueSelectableItemList<string> AlphaList { get; set; } = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        NumList = new MultipleSelectableItemList<int>(3)
        {
            new(0),
            new(1),
            new(2),
            new(3),
            new(4),
            new(5),
            new(6),
            new(7),
            new(8),
        };
    }
}
