@page "/CircularSelectorDemo"

@using NeoBlazorphic.Components.Inputs.CircularSelectors
@using NeoBlazorphic.Models.SelectableItems
@using NeoBlazorphic.StyleParameters
<h3>CircularSelectorDemo</h3>

<div class="col">
    <div class="row">
        <div class="col-2"> Amount of buttons: @AmountButtons </div>
        <button class="col-1 border-2 mx-2" @onclick="(e) => AmountButtons += 1"> + </button>
        <button class="col-1 border-2" @onclick="(e) => AmountButtons -= 1"> - </button>
    </div>

    <div class="row">
        <div class="col-2"> Size of buttons: @ButtonAngle ° </div>
        <button class="col-1 border-2 mx-2" @onclick="(e) => ButtonAngle += 15"> + </button>
        <button class="col-1 border-2" @onclick="(e) => ButtonAngle -= 15"> - </button>
    </div>

    <div class="row">
        <div class="col-2"> Offset: @AngleOffset ° </div>
        <button class="col-1 border-2 mx-2" @onclick="(e) => AngleOffset += 30"> + </button>
        <button class="col-1 border-2" @onclick="(e) => AngleOffset -= 30"> - </button>
    </div>
</div>


<CircularSelector Items=@NumList AngleOffset=@AngleOffset ButtonAngle=@ButtonAngle 
                  CenterText=@CenterTextNum OnItemHovered="(e) => CenterTextNum = e.Item.Label"
                  Shape="BackgroundShape.Convex"
                  T=int>
</CircularSelector>

<CircularSelector Items=@AlphaList AngleOffset=@AngleOffset ButtonAngle=@ButtonAngle 
                  CenterText=@CenterTextAlpha OnItemHovered="(e) => CenterTextAlpha = e.Item.Label"
                  Shape="BackgroundShape.Concave"
                  AccentClass="neo-danger"
                  T=string>
</CircularSelector>

@code {

    public int AmountButtons { get; set; } = 4;

    public int ButtonAngle { get; set; } = 45;

    public int AngleOffset { get; set; } = 0;

    public string CenterTextNum { get; set; } = "-1";
    public string CenterTextAlpha { get; set; } = "default";

    public SelectableItemList<int> NumList { get; set; }
    public SelectableItemList<string> AlphaList { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        NumList = new SelectableItemList<int>();
        AlphaList = new SelectableItemList<string>();
        ComputeItems();
    }

    private List<string> characters = new List<string>()
    {
        "a", "b", "c", "d", "e", "f", "g", "h",
        "i", "j", "k", "l", "m", "n", "o", "p"
    };

    private void ComputeItems()
    {
        var toRemove = Math.Max(NumList.Count - AmountButtons, 0);
        // removes the one too much
        NumList.RemoveRange(NumList.Count - toRemove , toRemove);
        // Adds missing ones
        for (var i = NumList.Count; i != AmountButtons; i += 1)
        {
            if (i == 1)
            {
                NumList.Add(new SelectableItem<int>(i, i, isEnabled: false));
            }
            else
            {
                NumList.Add(new SelectableItem<int>(i, i));
            }
        }

        toRemove = Math.Max(AlphaList.Count - AmountButtons, 0);
        // removes the one too much
        AlphaList.RemoveRange(AlphaList.Count - toRemove , toRemove);
        var a = 'a';
        // Adds missing ones
        for (var i = AlphaList.Count; i != AmountButtons; i += 1)
        {
            if (i == 1)
            {
                AlphaList.Add(new SelectableItem<string>(characters[i], i, isEnabled: false));
            }
            else
            {
                AlphaList.Add(new SelectableItem<string>(characters[i], i));
            }
        }

    }

}
