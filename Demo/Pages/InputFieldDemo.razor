@page "/inputfielddemo"

@using NeoBlazorphic.Components.Inputs.Fields.String;
@using NeoBlazorphic.Components.Inputs.Fields.Number;
@using Blazored.FluentValidation;
@using FluentValidation
@using NeoBlazorphic.StyleParameters
@using System.ComponentModel.DataAnnotations

@using PeterLeslieMorris.Blazor.Validation

@*Model="_Model"*@
<EditForm EditContext="_EditContext">
    <Validate />
    @*<DataAnnotationsValidator />*@
    @*<FluentValidationValidator />*@

    <div class="my-3">
        <StringInput Label="prénom" @bind-Value="_Model.FirstName" ValidationFor="@(() => _Model.FirstName)" PlaceHolder="firstname">
            <PrefixRenderFragment> <p class="" style="width: 100px; margin: 0 0.25rem;">Firstname</p> </PrefixRenderFragment>
            <SuffixRenderFragment> <p> +3 </p> </SuffixRenderFragment>
        </StringInput>
    </div>

    <div class="my-3">
        <StringInput ValidateOnKeyPress="true" LabelSizePx="121" Label="nom de famille" @bind-Value="_Model.LastName" ValidationFor="@(() => _Model.LastName)" PlaceHolder="lastname">
            <PrefixRenderFragment> <p style="width: 100px; margin: 0 0.25rem;">LastName</p> </PrefixRenderFragment>
        </StringInput>
    </div>

    <div class="my-3">
        <StringInput Label="prénom" @bind-Value="_Model.FirstName" ValidationFor="@(() => _Model.FirstName)" PlaceHolder="firstname">
            <PrefixRenderFragment> <p style="width: 100px; margin: 0 0.25rem;">Firstname</p> </PrefixRenderFragment>
        </StringInput>
    </div>

    <div class="my-3">
        <StringInput ValidateOnKeyPress="true" Label="nom de famille" @bind-Value="_Model.LastName" ValidationFor="@(() => _Model.LastName)" PlaceHolder="lastname">
            <PrefixRenderFragment> <p style="width: 100px; margin: 0 0.25rem;">LastName</p> </PrefixRenderFragment>
        </StringInput>
    </div>


    <div class="my-3">
        <IntInput ValidateOnKeyPress="false" Label="Age" @bind-Value="_Model.Age" ValidationFor="@(() => _Model.Age)" PlaceHolder="age"></IntInput>
    </div>
    <div class="my-3">
        <IntInput ValidateOnKeyPress="false" Label="Age" @bind-Value="_Model.Age" ValidationFor="@(() => _Model.Age)" PlaceHolder="age"></IntInput>
    </div>

    <div class="my-3">
        <IntInput ValidateOnKeyPress="false" Label="Age wrapped" @bind-Value="_Model.AgeWrapper._Age" ValidationFor="@(() => _Model.AgeWrapper._Age)" PlaceHolder="age"></IntInput>
    </div>

    <div class="my-3">
        <InputText @bind-Value="_Model.LastName"></InputText>
    </div>

    <button type="submit">Validate</button>
    <button @onclick="() => Test()">Test</button>
</EditForm>

<p>
    @_Model.FirstName @_Model.LastName @_Model.Age
</p>

@code {

    private void Test()
    {
        _EditContext.Validate();
    }

    public FormModel _Model { get; set; }
    public EditContext _EditContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _Model = new FormModel();
        _EditContext = new EditContext(_Model);
        await base.OnInitializedAsync();
    }

    public class AddressValidator : AbstractValidator<FormModel>
    {
        public AddressValidator()
        {
            RuleFor(x => x.FirstName).NotEmpty().WithMessage("you must specify a FirstName");
            RuleFor(x => x.FirstName).Length(3, 15).WithMessage("first name should be between 3 and 15 characters");

            RuleFor(x => x.LastName).NotEmpty().WithMessage("you must specify a last name");
            RuleFor(x => x.LastName).Length(3, 15).WithMessage("last name should be between 3 and 15 characters");

            RuleFor(x => x.Age).GreaterThanOrEqualTo(0).WithMessage("Age must be greater than or equal to 0");
            RuleFor(x => x.Age).LessThanOrEqualTo(10).WithMessage("Age must be less than or equal to 10");

            RuleFor(x => x.AgeWrapper).SetValidator(new AgeWrapperValidator());
        }
    }

    public class AgeWrapperValidator : AbstractValidator<AgeWrapper>
    {
        public AgeWrapperValidator()
        {
            RuleFor(x => x._Age).GreaterThanOrEqualTo(0).WithMessage("Age must be greater than or equal to 0");
            RuleFor(x => x._Age).LessThanOrEqualTo(10).WithMessage("Age must be less than or equal to 10");
        }
    }

    public class AgeWrapper
    {
        [Required]
        [Range(0, 55)]
        public int _Age { get; set; }
    }

    public class FormModel
    {
        [Required]
        [MinLength(3)]
        public string FirstName { get; set; }
        [Required]
        [MinLength(3)]
        public string LastName { get; set; }

        [Required]
        [Range(0, 100)]
        public int Age { get; set; } = 0;

        public AgeWrapper AgeWrapper { get; set; } = new () { _Age = 0 };
    }
}
