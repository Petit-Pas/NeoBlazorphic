@using NeoBlazorphic.Extensions.BaseTypes;
@using NeoBlazorphic.Math.Units
@using NeoBlazorphic.StyleParameters;

@{
    // calculate origins for gradients since we want the gradient to invert the rotation of the button itself
    // we take base angle as 135 deg
    var angleInRadiansForGradient = Converter.ToRadian(AngleShift + 135);

    // The 20 comes from the radius of the bigger circle of the selector, radius which we need to inject into the trigonometric calculations
    var originX = (Math.Cos(angleInRadiansForGradient) * 20).ToInvariantString();
    var originY = (-Math.Sin(angleInRadiansForGradient) * 20).ToInvariantString();
    var endX = (-Math.Cos(angleInRadiansForGradient) * 20).ToInvariantString();
    var endY = (Math.Sin(angleInRadiansForGradient) * 20).ToInvariantString();

    // calculate label position
    var angleInRadians = Converter.ToRadian(ButtonAngle);

    // Since the radius is 20 but we don't want to place the label on the circle, we use a smaller radius for trigonometric calculations
    var labelX = (Math.Cos(angleInRadians / 2) * 15).ToInvariantString();
    var labelY = (-(Math.Sin(angleInRadians / 2) * 15)).ToInvariantString();
}

<g class=" circular-selector-button @(Selected ? "selected": "") @(Selected ? ButtonContent.SelectedClass : "") @ButtonContent.AdditionalClass @GetSelectedThemeClass @GetShapeClass"
   style="transition: all .15s ease-in-out;"
   transform="rotate(@AngleShift)">
    <defs>
        <!-- Gradient for the button, we use the calculated origin to act as if all buttons where sharing the same gradient -->
        <linearGradient id=@($"{UID}-ButtonGradient") x1=@originX y1=@originY x2=@endX y2=@endY gradientUnits="userSpaceOnUse">
            <stop offset="0%" stop-color="white">
            </stop>
            <stop offset="100%" stop-color="black">
            </stop>
        </linearGradient>
    </defs>

    <!-- Drawing the button itself -->
    <g class="button-path">
        <path d=@PathString fill="url(@($"#{UID}-ButtonGradient"))"
              @onclick="OnClick">
        </path>

        @if (ButtonContent != null)
        {
            <foreignObject x=@((double.Parse(labelX.Replace(".", ",")) + ButtonContent.xShift).ToInvariantString()) 
                           y=@((double.Parse(labelY.Replace(".", ",")) + ButtonContent.yShift).ToInvariantString()) 
                           transform="rotate(@(-AngleShift) @labelX @labelY)" 
                           width="5" height="5"
                           style="pointer-events: none;">
                @ButtonContent.ChildContent
            </foreignObject>
        }
    </g>

</g>

