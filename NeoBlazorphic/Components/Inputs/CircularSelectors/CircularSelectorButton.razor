@using NeoBlazorphic.Extensions.BaseTypes;
@using NeoBlazorphic.Math.Units
@using NeoBlazorphic.StyleParameters;

@typeparam T

<g class="circular-selector-button-group @ShapeClass @PointerClass @SelectedClass @SelectedThemeClass @ContentSelectedClass @ContentAdditionalClass @EnabledClass"
   transform="rotate(@AngleShift)">
    <defs>
        @* Gradient for the button, we use the calculated origin to act as if all buttons where sharing the same gradient *@
        <linearGradient id="@_gradientId" gradientUnits="userSpaceOnUse"
                        x1="@_gradientOriginX" y1="@_gradientOriginY" 
                        x2="@_gradientEndX" y2="@_gradientEndY" >
            <stop offset="0%"/>
            <stop offset="100%"/>
        </linearGradient>
    </defs>

    <!-- Drawing the button itself -->
    <g class="circular-selector-button">
        <path d=@PathString fill="@($"url(#{@_gradientId})")"
              @onclick="OnClick" @onmouseover="OnOver">
        </path>

        @if (ButtonContent != null)
        {   
            <foreignObject class="circular-selector-content"
                           x=@_labelShiftedX y=@_labelShiftedY
                           transform="rotate(@(-AngleShift) @_labelOriginX @_labelOriginY)" 
                           width="5" height="5">
                @ButtonContent.ChildContent
            </foreignObject>
        }
    </g>

</g>

