@using NeoBlazorphic.Extensions.BaseTypes;
@using NeoBlazorphic.Math.Units
@using NeoBlazorphic.StyleParameters;

@{
    // calculate origins for gradients since we want the gradient to invert the rotation of the button itself
    // we take base angle as 135 deg
    var angleInRadiansForGradient = Converter.ToRadian(AngleShift + 135);

    // The 20 comes from the radius of the bigger circle of the selector, radius which we need to inject into the trigonometric calculations
    var originX = (Math.Cos(angleInRadiansForGradient) * 20).ToInvariantString();
    var originY = (-Math.Sin(angleInRadiansForGradient) * 20).ToInvariantString();
    var endX = (-Math.Cos(angleInRadiansForGradient) * 20).ToInvariantString();
    var endY = (Math.Sin(angleInRadiansForGradient) * 20).ToInvariantString();

    // calculate label position
    var angleInRadians = Converter.ToRadian(ButtonAngle);

    // Since the radius is 20 but we don't want to place the label on the circle, we use a smaller radius for trigonometric calculations
    var labelX = (Math.Cos(angleInRadians / 2) * 15).ToInvariantString();
    var labelY = (-(Math.Sin(angleInRadians / 2) * 15)).ToInvariantString();
}

<g
   style="transition: all .15s ease-in-out;"
   transform="rotate(@AngleShift) scale(@ScaleFactor)">
    <defs>
        <!-- Gradient for the button, we use the calculated origin to act as if all buttons where sharing the same gradient -->
        <linearGradient id=@($"{UID}-ButtonGradient") x1=@originX y1=@originY x2=@endX y2=@endY gradientUnits="userSpaceOnUse">
            @if (Shape == BackgroundShape.Concave)
            {
                <stop offset="0%" stop-color="var(--dark-color)" />
                <stop offset="100%" stop-color="var(--light-color)" />
            }
            else if (Shape == BackgroundShape.Convex)
            {
                <stop offset="0%" stop-color="var(--light-color)" />
                <stop offset="100%" stop-color="var(--dark-color)" />
            }
        </linearGradient>
    </defs>

    <!-- Drawing the button itself -->
    <path d=@PathString fill="url(@($"#{UID}-ButtonGradient"))">
    </path>

    @if (ButtonContent != null)
    {
        <foreignObject x=@((double.Parse(labelX.Replace(".", ",")) - 1).ToInvariantString()) 
                       y=@((double.Parse(labelY.Replace(".", ",")) - 4).ToInvariantString()) 
                       transform="rotate(@(-AngleShift) @labelX @labelY)" 
        width="5" height="5">
            @ButtonContent.ChildContent
        </foreignObject>
    }

</g>

