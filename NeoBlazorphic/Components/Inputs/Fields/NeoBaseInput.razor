@typeparam T
@inherits InputBase<T>

@using NeoBlazorphic.Components.Base.Cards
@using NeoBlazorphic.StyleParameters

@using NeoBlazorphic.Components.ToolTips

<div> @IsValid </div>

<div @onmouseover="OnMouseOver" @onmouseout="OnMouseOut">
    <ToolTip>
        <ChildContent>

            @if (LabelPosition is ElementRelativePosition.Left or ElementRelativePosition.Right)
            {
                <div class="@GetAccentColor()">
                    <Card ShadowPosition="ShadowPosition.Out" Padding="Spacing._1" BorderRadius="@(new(4, "rem"))" >

                        <div class="grid" style="@GetColumnDefinition() @GetRowDefinition() align-items: center">

                            @if (!string.IsNullOrWhiteSpace(Label))
                            {
                                <label class="mx-2" style="@GetLabelGridPositions()" for="@Id">@Label</label>
                            }

                            <div class="@GetInputAccentClass()" style="@GetFieldGridPositions()">

                                <Card ShadowPosition="ShadowPosition.In" Padding="Spacing._2" BorderRadius="@GetFieldBorderRadius()">
                                    <input @onfocusin="OnFocusIn" @onfocusout="OnFocusOut"
                                           type="text" class="" style="-webkit-appearance: none; outline: none; background: transparent; color: var(--text-color); width: 100%"
                                           id="@Id" placeholder="@Placeholder"
                                           @oninput="GetOnInputBinder()" @onchange="GetOnChangeBinder()" value="@CurrentValueAsString" />
                                </Card>
                            </div>
                        </div>
                    </Card>
                </div>
            }
            else
            {
                <div class="d-grid" style="@GetColumnDefinition() @GetRowDefinition() align-items: center">

                    @if (!string.IsNullOrWhiteSpace(Label))
                    {
                        <label class="mx-2" style="@GetLabelGridPositions()" for="@Id">@Label</label>
                    }

                    <div class="@GetInputAccentClass()" style="@GetFieldGridPositions()">

                        <Card ShadowPosition="ShadowPosition.In" Padding="Spacing._2" BorderRadius="@GetFieldBorderRadius()">
                            <input @onfocusin="OnFocusIn" @onfocusout="OnFocusOut"
                                   type="text" class="" style=" -webkit-appearance: none; outline: none; background: transparent; color: var(--text-color); width: 100%"
                                   id="@Id"  placeholder="@Placeholder"
                                   @oninput="GetOnInputBinder()" @onchange="GetOnChangeBinder()" value="@CurrentValueAsString" />
                        </Card>
                    </div>
                </div>
            }

        </ChildContent>
        
        <ToolTipContent>
            @if (IsHovered || IsFocused)
            {
                <div>
                    <Card ShouldBeVisibleWhenEmpty="false">
                        <ValidationMessage For="@ValidationFor"/>
                    </Card>
                </div>
            }
        </ToolTipContent>
    </ToolTip>
</div>


